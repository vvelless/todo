{"ast":null,"code":"var _s = $RefreshSig$();\nimport { QueryClient, useMutation, useQuery } from \"react-query\";\nexport const useTaskMutations = () => {\n  _s();\n  const tasksQuery = useQuery('tasks', () => JSON.parse(localStorage.getItem('tasks')) || []);\n  const queryClient = new QueryClient();\n  const addTaskMutation = useMutation(async newTask => {\n    const updatedTasks = [...(tasksQuery.data ? tasksQuery.data : []), {\n      id: tasksQuery.data ? tasksQuery.data.length + 1 : 1,\n      ...newTask\n    }];\n    localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n    return updatedTasks;\n  }, {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries('tasks');\n      await tasksQuery.refetch();\n    }\n  });\n  const deleteTaskMutation = useMutation(async taskId => {\n    const updatedTasks = tasksQuery.data.filter(task => task.id !== taskId);\n    localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n    return updatedTasks;\n  }, {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries('tasks');\n      await tasksQuery.refetch();\n    }\n  });\n  const updateTaskMutation = useMutation(async updatedTask => {\n    const updatedTasks = tasksQuery.data.map(task => task.id === updatedTask.id ? {\n      ...task,\n      ...updatedTask\n    } : task);\n    localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n    return updatedTasks;\n  }, {\n    onSuccess: async () => {\n      await queryClient.invalidateQueries('tasks');\n      await tasksQuery.refetch();\n    }\n  });\n  return {\n    tasksQuery,\n    addTaskMutation,\n    deleteTaskMutation,\n    updateTaskMutation\n  };\n};\n_s(useTaskMutations, \"Af4BbUYiT4uZxbFBHfgMwycmwg4=\", false, function () {\n  return [useQuery, useMutation, useMutation, useMutation];\n});","map":{"version":3,"names":["QueryClient","useMutation","useQuery","useTaskMutations","_s","tasksQuery","JSON","parse","localStorage","getItem","queryClient","addTaskMutation","newTask","updatedTasks","data","id","length","setItem","stringify","onSuccess","invalidateQueries","refetch","deleteTaskMutation","taskId","filter","task","updateTaskMutation","updatedTask","map"],"sources":["C:/Users/79124/Desktop/my-todo-app/src/hooks/useTaskMutations.js"],"sourcesContent":["import {QueryClient, useMutation, useQuery} from \"react-query\";\r\n\r\nexport const useTaskMutations = () => {\r\n    const tasksQuery = useQuery('tasks',\r\n        () => JSON.parse(localStorage.getItem('tasks')) || []);\r\n\r\n    const queryClient = new QueryClient();\r\n\r\n    const addTaskMutation = useMutation(\r\n        async (newTask) => {\r\n            const updatedTasks = [\r\n                ...(tasksQuery.data ? tasksQuery.data : []),\r\n                { id: tasksQuery.data ? tasksQuery.data.length + 1 : 1, ...newTask },\r\n            ];\r\n            localStorage.setItem('tasks', JSON.stringify(updatedTasks));\r\n            return updatedTasks;\r\n        },\r\n        {\r\n            onSuccess: async () => {\r\n                await queryClient.invalidateQueries('tasks');\r\n                await tasksQuery.refetch();\r\n            },\r\n        }\r\n    );\r\n\r\n    const deleteTaskMutation = useMutation(\r\n        async (taskId) => {\r\n            const updatedTasks = tasksQuery.data.filter((task) => task.id !== taskId);\r\n            localStorage.setItem('tasks', JSON.stringify(updatedTasks));\r\n            return updatedTasks;\r\n        },\r\n        {\r\n            onSuccess: async () => {\r\n                await queryClient.invalidateQueries('tasks');\r\n                await tasksQuery.refetch();\r\n            },\r\n        }\r\n    );\r\n\r\n    const updateTaskMutation = useMutation(\r\n        async (updatedTask) => {\r\n            const updatedTasks = tasksQuery.data.map((task) =>\r\n                task.id === updatedTask.id ? { ...task, ...updatedTask } : task\r\n            );\r\n            localStorage.setItem('tasks', JSON.stringify(updatedTasks));\r\n            return updatedTasks;\r\n        },\r\n        {\r\n            onSuccess: async () => {\r\n                await queryClient.invalidateQueries('tasks');\r\n                await tasksQuery.refetch();\r\n            },\r\n        }\r\n    );\r\n\r\n    return { tasksQuery, addTaskMutation, deleteTaskMutation, updateTaskMutation };\r\n};"],"mappings":";AAAA,SAAQA,WAAW,EAAEC,WAAW,EAAEC,QAAQ,QAAO,aAAa;AAE9D,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAMC,UAAU,GAAGH,QAAQ,CAAC,OAAO,EAC/B,MAAMI,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;EAE1D,MAAMC,WAAW,GAAG,IAAIV,WAAW,CAAC,CAAC;EAErC,MAAMW,eAAe,GAAGV,WAAW,CAC/B,MAAOW,OAAO,IAAK;IACf,MAAMC,YAAY,GAAG,CACjB,IAAIR,UAAU,CAACS,IAAI,GAAGT,UAAU,CAACS,IAAI,GAAG,EAAE,CAAC,EAC3C;MAAEC,EAAE,EAAEV,UAAU,CAACS,IAAI,GAAGT,UAAU,CAACS,IAAI,CAACE,MAAM,GAAG,CAAC,GAAG,CAAC;MAAE,GAAGJ;IAAQ,CAAC,CACvE;IACDJ,YAAY,CAACS,OAAO,CAAC,OAAO,EAAEX,IAAI,CAACY,SAAS,CAACL,YAAY,CAAC,CAAC;IAC3D,OAAOA,YAAY;EACvB,CAAC,EACD;IACIM,SAAS,EAAE,MAAAA,CAAA,KAAY;MACnB,MAAMT,WAAW,CAACU,iBAAiB,CAAC,OAAO,CAAC;MAC5C,MAAMf,UAAU,CAACgB,OAAO,CAAC,CAAC;IAC9B;EACJ,CACJ,CAAC;EAED,MAAMC,kBAAkB,GAAGrB,WAAW,CAClC,MAAOsB,MAAM,IAAK;IACd,MAAMV,YAAY,GAAGR,UAAU,CAACS,IAAI,CAACU,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACV,EAAE,KAAKQ,MAAM,CAAC;IACzEf,YAAY,CAACS,OAAO,CAAC,OAAO,EAAEX,IAAI,CAACY,SAAS,CAACL,YAAY,CAAC,CAAC;IAC3D,OAAOA,YAAY;EACvB,CAAC,EACD;IACIM,SAAS,EAAE,MAAAA,CAAA,KAAY;MACnB,MAAMT,WAAW,CAACU,iBAAiB,CAAC,OAAO,CAAC;MAC5C,MAAMf,UAAU,CAACgB,OAAO,CAAC,CAAC;IAC9B;EACJ,CACJ,CAAC;EAED,MAAMK,kBAAkB,GAAGzB,WAAW,CAClC,MAAO0B,WAAW,IAAK;IACnB,MAAMd,YAAY,GAAGR,UAAU,CAACS,IAAI,CAACc,GAAG,CAAEH,IAAI,IAC1CA,IAAI,CAACV,EAAE,KAAKY,WAAW,CAACZ,EAAE,GAAG;MAAE,GAAGU,IAAI;MAAE,GAAGE;IAAY,CAAC,GAAGF,IAC/D,CAAC;IACDjB,YAAY,CAACS,OAAO,CAAC,OAAO,EAAEX,IAAI,CAACY,SAAS,CAACL,YAAY,CAAC,CAAC;IAC3D,OAAOA,YAAY;EACvB,CAAC,EACD;IACIM,SAAS,EAAE,MAAAA,CAAA,KAAY;MACnB,MAAMT,WAAW,CAACU,iBAAiB,CAAC,OAAO,CAAC;MAC5C,MAAMf,UAAU,CAACgB,OAAO,CAAC,CAAC;IAC9B;EACJ,CACJ,CAAC;EAED,OAAO;IAAEhB,UAAU;IAAEM,eAAe;IAAEW,kBAAkB;IAAEI;EAAmB,CAAC;AAClF,CAAC;AAACtB,EAAA,CAtDWD,gBAAgB;EAAA,QACND,QAAQ,EAKHD,WAAW,EAiBRA,WAAW,EAcXA,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}